#include <iostream>

using namespace std;
int main() {
	//一、并发、进程、线程的基本概念和综述
	//并发，线程，进程要求必须掌握；
	//(1.1)并发
	//两个或者更多的任务(独立的活动)同时发生(进行)：一个程序同时执行多个独立的任务；
	//以往计算机，单核cpu(中央处理器)：某一个时刻只能执行要给任务：由操作系统调度，每秒钟进行多次所谓的“任务切换”
	//并发到的假象(不是真正的并发)；这种切换(上下文切换)是要有时间开销的，比如操作系统要保存你切换时的各种状态，都需要时间，一会切换回来的时候要复原这些信息

	//硬件发展，出现类多处理器计算机，用于服务器和高性能计算领域。
	//台式机：在一块芯片上有多核(多个cpu)：双核、四核、八核。。。
	//能够实现真正的并行执行多个任务(硬件并发)

	//使用并发的原因:主要就是同时可以干多个事，提高性能
	//(1.2)可执行程序
	//磁盘上的一个文件，window下的一个扩展名为.exe的。
	//(1.3)进程：大家已经知道了可执行程序是能够运行的。
	//window下，双击一个可执行程序来运行。linux下./文件名；
	//进程，就是一个可执行程序运行起来了，就叫创建了一个进程。
	//进程，就是运行起来的可执行程序

	/*while (1) {

	}*/
	//(1.4)线程
	//(a)每个进程(执行起来的可执行程序)，都有一个主线程，这个主线程是唯一的，也就是一个进程中只能有一个主线程。
	//(b)当你执行可执行程序，产生了一个进程后，这个主线程就随着这个进程默默的启动起来了；
	//Ctrl+F5运行这个程序的时候，实际上是进程的主线程来执行(调度)这个main函数中的代码；
	//主线程与进程唇齿相依，有你必然有我，有我必然有你，没有我必然没有你；
	//线程：用来执行代码的
	//线程这个东西理解成一条代码的执行通路(道路);

	//除了主线程之外，我们可以通过自己写代码来创建其他线程，其他线程走的是别的道路，甚至去不同的地方，
	//每创建一个新线程，我就可以在同一个时刻，多干一个不同的事（多走一条不同的代码执行路径）;

	//多线程(并发)
	//线程并不是越多越好，每个线程，都需要一个独立的堆栈空间(1M)，线程之间的切换要保存很多中间状态；
	//切换会耗费本该属于程序运行的时间；

	//总结线程:
	//a)线程是用来执行代码的;
	//b)把线程这个东西理解成一条代码的执行通路(道路),一个新线程代表一条新的通路。
	//c)一个进程自动包含一个主线程，主线程随着进程默默的启动并运行，我们可以通过编码来创建多个其他线程(非主线程)
	//  但是创建的数量最大都不建议超过200-300个，至于到底多少个合适，
	//  大家在实际的项目中可以不断调整和优化，有的时候线程太多的时候效率反而会降低。
	//d)因为主线程是自动启动的，所以一个进程中最少也是有一个线程(主线程)。进程和主线感觉是爹和儿子的关系。
	//e)说白了:多线程程序可以同时干多个事，所以运行效率高，但是到底多高，并不是一个很容易评估和量化的东西。
	//大家仍旧需要在实际编程，实际项目中进行体会和调整优化；

	//(1.5)学习心得
	//开发多线程程序:实力的体现。一个是商用的必须需求;
	//线程开发有一定难度。实际代码复杂。理解上更难一些，需要一定的学习时间。
	//c++线程会涉及很多新概念，对于C++道路上的成长特别关键，不要急于求成;

	//二、并发的实现方法
	//实现并发的手段：
	//a)我们通过多个进程实现并发。
	//b)在单独的进程中，我创建多个线程来实现并发;自己写代码来创建除了主线之外的其他线程；

	//(2.1)多进程并发
	//word启动后就是进程。浏览器启动后就是个进程。
	//账号服务器，游戏逻辑服务器。服务器进程之间的通信。
	//进程之间的通信(同一个电脑上:管道，文件，消息队列，共享内存)；
				  //(不同电脑上:socket通信技术)；
	//(2.2)多线程并发:单个进程中，创建了多个线程。
	//线程:(感觉像轻量级的进程。每个线程都是自己独立的运行路径，但是一个进程中的所有线程共享地址空间(共享内存))；
	//全局变量，指针，引用都可以在线程之间传递，所以:使用多线程开销远远小于多进程。
	//共享内存带来新问题，数据一致性问题；线程A，线程B；
	//多进程并发和多线程并发虽然可以混合使用，但建议，优先考虑多线程技术手段而不是多进程；
	//咱们只讲多线程并发。

	//(2.3)总结
	//和进程比，线程有如下优点:
	//(1)线程启动速度更快，更轻量级；
	//(2)系统资源开销更小，执行速度更快，比如共享内存这种通信方式比任何其他的通信方式都快;
	//缺点：
	//使用有一定难度，要更小心处理数据的一致性问题。

	//三、C++11新标准线程库
	//以往:windows：CreateThread(),_beginthred(),_beginthredexe() 创建线程
	//linux:pthread_create() 创建线程
	//临界区，互斥量；
	//以往多线程代码不能跨平台
	//POSIX thread(phread):跨平台；需做一番配置，所以用起来也不是特别方便。

	//从C++11新标准，C++语言本身增加多线程的支持，意味着可移植性(跨平台)，这大大减少开发人员工作量了，







	return 0;
}