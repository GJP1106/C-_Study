
shared_ptr<int> myfunc(shared_ptr<int> &ptmp)  //如果参数为引用，则智能指针的引用计数不会增加
{
	return ptmp;
}


int main() {
     //一、shared_ptr引用计数的增加和减少
	 //共享式，引用计数，每一个shared_ptr的拷贝都指向相同的内存(对象)，只有最后一个指向该对象
	 //的shared_ptr指针不需要再指向该对象的时候，这个shared_ptr才会去析构所指向的对象。
	 //(1.1)引用计数的增加
	 //每个shared_ptr都会记录有多少个其他的shared_ptr指向相同的对象；
	 auto p6 = make_shared<int>(100); //目前p6所指向的对象只有p6一个引用者；
     auto p7(p6);//智能指针定义时的初始化，p7和p6指向了相同的对象，此对象目前有两个引用者；

     //在如下情况下，所有指向这个对象的shared_ptr引用计数都会增加
     //a)像上边这样，我们用p6来初始化p7这个智能指针；
	//b)把智能指针当做实参往函数里传递
	myfunc(p7);
	//c)作为函数返回值
	auto p8 = myfunc(p7);  //引用计数会变成3，这是因为有p8来接这个临时的智能指针。
	//myfunc(p7);  //没有变量来接这个临时的智能指针，则临时智能指针生命周期到了，引用计数从3恢复到2；
	
	//(1.2)引用计数的减少
	//a)给shared_ptr赋予新值，让该shared_ptr指向一个新对象；
	p8 = make_shared<int>(200);   //p8指向新对象，计数为1，p6、p7计数恢复为2；
	p7 = make_shared<int>(200);   //p7指向新对象，计数为1，p6计数恢复为1；
	p6 = make_shared<int>(200);   //p6指向新对象，计数为1，p6所指向的原内存被释放；
	//b)


}